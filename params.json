{"name":"Macchiato","body":"# Macchiato.js - BDD + QDD testing framework for JavaScript -\r\n**Macchiato** is testing framework for JavaScript, inspired by [QuickCheck](http://hackage.haskell.org/package/QuickCheck-2.4.2), a similar library for [Haskell](http://www.haskell.org/) programs.\r\n\r\n## About [QuickCheck](http://hackage.haskell.org/package/QuickCheck-2.4.2)\r\n_from [QuickCheck module description](http://hackage.haskell.org/package/QuickCheck-2.4.2)_\r\n\r\n> QuickCheck is a library for random testing of program properties.\r\n> \r\n> The programmer provides a specification of the program, in the form of properties which functions should satisfy, and QuickCheck then tests that the properties hold in a large number of randomly generated cases.\r\n> \r\n> Specifications are expressed in Haskell, using combinators defined in the QuickCheck library. QuickCheck provides combinators to define properties, observe the distribution of test data, and define test data generators.\r\n\r\n## Demo page\r\nsee [voqn.github.com/macchiato/](http://voqn.github.com/macchiato/)\r\n\r\n## Sorry. now Macchiato.js is under development\r\nplease see [GitHub Milestones](https://github.com/VoQn/macchiato/issues/milestones/)\r\n\r\n## Sample code\r\n### Register test suites\r\nUse `macchiato.stock( labeled_properties )`\r\n\r\n``` {.javascript}\r\nmacchiato.stock({ // stock test properties as object\r\n    'number x, y => x + y === y + x' : // <label>:<callback>\r\n          arbitrary( 'number', 'number' ).property( function( x, y ){\r\n              return x + y === y + x; // boolean\r\n          })\r\n}).taste(); // run all stocked test suites\r\n```\r\n\r\nin default, macchiato.js generate 100 pattern argument per test-property.\r\n\r\n### Run Test Suites\r\nUse `macchiato.taste()`\r\n\r\n```javascript\r\nmacchiato.taste(); // check all stocked test quite. and display test result\r\n```\r\n\r\n### How to see generator works\r\nUse `arbitrary.sample( opt_count )`\r\n\r\n``` {.javascript}\r\narbitrary( 'boolean' ).sample( 5 ); // [ true, false, false, true, true ]\r\narbitrary( 'boolean' ).sample( 5 ); // [ false, false, true, false, true ]\r\n\r\n// in default, return array has 10 elements\r\narbitrary( 'integer' ).sample(); // [ 0,1,1,0,-1,6,6,-12,-2,16 ]\r\n```\r\n\r\n### Use adhoc new type generator\r\nUse `arbitrary( type_signature ).fmap( modifier_callback )`\r\n```javascript\r\n// Non Negative Integer generator\r\narbitrary('integer').fmap( function( n ){\r\n  return Math.abs( n );\r\n}).property( function( x ){\r\n  return x > -1;\r\n});\r\n```\r\n\r\n### Register User generator\r\nUse `arbitrary( type_signature ).recipe( generator_callback )`\r\n```javascript\r\narbitrary( 'hoge' ).recipe(\r\n  combinrator.elements( ['hoge', 'huga', 'foo', 'bar'] )\r\n);\r\n```\r\n\r\nOr, `arbitrary( type_signature ).recipeAs( new_type_signature )`\r\n```javascript\r\narbitrary( 'integer' ).fmap( function( n ){\r\n  var x = Math.max( Math.abs( n ), 1 );\r\n  return x % 15 == 0 ? 'FizzBuzz' : x % 5 == 0 ? 'Buzz' : x % 3 == 0 ? 'Fizz' : x;\r\n}).recipeAs( 'fizzbuzz' );\r\n```\r\n\r\n","tagline":"BDD + QDD testing framework for JavaScript","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}